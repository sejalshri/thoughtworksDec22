Lab3 - https://www.geeksforgeeks.org/using-async-await-in-node-js/
        create two more classes and invoke the functionality from index.js
            Dept.ts
                        private fields
                        Constructor(with 3 args)
                        get/set

            DeptDAO.ts
                        create(dept)
                    //    update(dept)
                    //    delete(deptno)
                    //    read(print content, return dept array)
            Modify index.ts to invoke create

Lab2 - index.ts
            const {  Client } = require("pg");

            const credentials = {
              user: "postgres",
              host: "localhost",
              database: "postgres",
              password: "admin",
              port: 5432,
            };


            // Connect with a client.

            async function clientDemo() {
              const client = new Client(credentials);
              await client.connect();
              const now = await client.query("SELECT * from dept");
              await client.end();
              return now;
            }

            // Use a self-calling function so we can use async / await.

            (async () => {
              const clientResult = await clientDemo();
              console.log("Time with client: " );
              console.log (clientResult)

            })();

      -> run code, check errors and modify package.json accrodingly

Lab1 - psql / pgAdmin
      Connect to Server
      Check ->   select version();
      Create table in default database
              Dept -> deptno(number) , dname(string), loc(string)
            
